getwd
getwd()
getwd()
setwd("~/USU/DF_Areas/debris_flow_stats/code/RProjects/website/RDS_website")
knitr::include_graphics("C:/Users/clang/Documents/USU/DF_Areas/debris_flow_stats/code/RProjects/website/docs/_main_files/figure-html/database_structure.png") #this probably won't work because my book isnt updating for some reason....
library(DBI)
dragons_db = dbConnect(drv = RSQLite::SQLite(),(".../Spring_2023/WILD6900/sql_exercises/dragons.db")
dragons_db = dbConnect(drv = RSQLite::SQLite(),("USU/Classes/Spring_2023/WILD6900/sql_exercises/dragons.db")
dragons_db = dbConnect(drv = RSQLite::SQLite(),("USU/Classes/Spring_2023/WILD6900/sql_exercises/dragons.db")
dragons_db = dbConnect(drv = RSQLite::SQLite(),('C:\\Users\\clang\\Documents\\USU\\Classes\\Spring_2023\\WILD6900\\sql_exercises\\dragons.db)
dragons_db = dbConnect(drv = RSQLite::SQLite(),('C:\\Users\\clang\\Documents\\USU\\Classes\\Spring_2023\\WILD6900\\sql_exercises\\dragons.db')
dragons_db <- dbConnect(drv = RSQLite::SQLite(),('C:\\Users\\clang\\Documents\\USU\\Classes\\Spring_2023\\WILD6900\\sql_exercises\\dragons.db')
dragons_db = dbConnect(drv = RSQLite::SQLite(),('C:\\Users\\clang\\Documents\\USU\\Classes\\Spring_2023\\WILD6900\\sql_exercises\\dragons.db')
dragons_db = dbConnect(drv = RSQLite::SQLite(),'C:\\Users\\clang\\Documents\\USU\\Classes\\Spring_2023\\WILD6900\\sql_exercises\\dragons.db')
dragons_db = dbConnect(drv = RSQLite::SQLite(),'C:\\Users\\clang\\Documents\\USU\\Classes\\Spring_2023\\WILD6900\\sql_exercises\\dragons.db')
diet = dbQuery(conn = dragons_db,
'SELECT * FROM dragons;')
diet = dbGetQuery(conn = dragons_db,
'SELECT * FROM dragons;')
morphometrics = dbGetQuery(conn = dragons.db,
'select * from morphometrics
')
morphometrics = dbGetQuery(conn = dragons_db,
'select * from morphometrics')
diet = dbGetQuery(conn = dragons_db,
'SELECT * FROM diet;')
morphometrics = dbGetQuery(conn = dragons_db,
'select * from morphometrics;')
gps = dbGetQuery(conn = dragons_db,
'select * from gps_data;')
dragons = dbGetQuery(conn = dragons_db,
'select * from dragons;')
inds = dragons$dragon_id
length(inds)
inds[1] %in% morphometrics$dragon_id
inds[1] %in% diet$dragon_id
inds[1] %in% unique(gps$dragon_id)
sustem.time({inds[1] %in% unique(dps$dragon_id)})
system.time({inds[1] %in% unique(dps$dragon_id)})
system.time({inds[1] %in% unique(gps$dragon_id)})
system.time({inds[1] %in% gps$dragon_id})
res = data.frame(dragons_id = NA,
has_morphometrics = NA,
has_gps = NA,
has_diet = NA)
for (i in 1:length(inds)){
res[i, ] $dragon_id = inds[i]
res[i,]$has_morphometrics = inds[i]%in% morphometrics$dragon_id
res[i,]$diet = inds[i]%in% diet$dragon_id
res[i,]$has_gps = inds[i]%in% unique(gps$dragon_id)
}
res[res$has_gps & res$has_diet,]
View(res)
res[res$has_gps & res$has_diet,]
for (i in 1:length(inds)){
res[i, ] $dragon_id = inds[i]
res[i,]$has_morphometrics = inds[i]%in% morphometrics$dragon_id
res[i,]$diet = inds[i]%in% diet$dragon_id
res[i,]$has_gps = inds[i]%in% gps$dragon_id
}
res[res$has_gps & res$has_diet,]
res[i,]$has_diet = inds[i]%in% diet$dragon_id
res[res$has_gps & res$has_diet,]
res[i, ]$dragon_id = inds[i]
inds[i]
res[i,]$has_gps <- inds[i]%in% gps$dragon_id
res[res$has_gps & res$has_diet,]
inds = dragons$dragon_id
length(inds)
inds[1] %in% morphometrics$dragon_id
inds[1] %in% diet$dragon_id
inds[1] %in% unique(gps$dragon_id)
system.time({inds[1] %in% unique(gps$dragon_id)})
system.time({inds[1] %in% gps$dragon_id})
res = data.frame(dragons_id = NA,
has_morphometrics = NA,
has_gps = NA,
has_diet = NA)
for (i in 1:length(inds)){
res[i, ]$dragon_id <- inds[i]
res[i,]$has_morphometrics <- inds[i]%in% morphometrics$dragon_id
res[i,]$has_diet <- inds[i]%in% diet$dragon_id
res[i,]$has_gps <- inds[i]%in% gps$dragon_id
}
res[res$has_gps & res$has_diet,]
nrow(res[res$has_gps & res$has_diet,])
vol_ratio = vol_reg_obs
vol_comp = read.csv('C:\\Users\\clang\\Documents\\USU\\DF_Areas\\debris_flow_stats\\data\\data_sheets\\processed_summary_data\\volume_comps.csv', header = T, na.strings = ' ')
head(vol_comp)
vol_reg_obs = vol_comp[,c(1:2,6)]
vol_ratio = vol_reg_obs
vol_ratio$Ratio = NA
vol_ratio$Used = NA
View(vol_ratio)
vol_ratio[c(3,5,6,9,12,13,14,16,19,23), 5] = 'Used'
vol_ratio[c(1,3,4,7,8,10,11,15,17,18,20,21,22,24:29),5] = 'Not Used'
group = c('Y','N')
View(vol_ratio)
setwd("~/USU/DF_Areas/debris_flow_stats/code/RProjects")
setwd("C:/Users/clang/Documents/USU/DF_Areas/debris_flow_stats/data")
gsdvol= readxl::read_excel('~USU\\DF_Areas\\debris_flow_stats\\data\\data_sheets\\process_summary_data\\Catchment_Stats.xlsx', sheet = 'Vol_Summaries', na = ' ')
wallsd = wall_vol[,-c(3)]
est_vol = gsdvol[c(1,2)]
gsdvol= readxl::read_excel('C:\\Users\\clang\\Documents\\USU\\DF_Areas\\debris_flow_stats\\data\\data_sheets\\processed_summary_data\\Catchment_Stats.xlsx', sheet = 'Vol_Summaries', na = ' ')
est_vol = gsdvol[c(1,2)]
wall_vol = gsdvol[,c(1,3)]
g14 = gsdvol[,c(1,8)]
est = 'imagery'
wall = 'Wall (2022)'
gart = 'Gartner (2014) 1yr'
wall_vol = cbind(wall_vol, wall)
colnames(wall_vol) = c('Site','VolM', 'Source')
g14 = cbind(g14, gart)
colnames(g14) = c('Site','VolM', 'Source')
est_vol = cbind(est_vol, est)
colnames(est_vol)= c('Site', 'VolM', 'Source')
all = rbind(g14, wall_vol)
all = cbind(all, est_vol[2])
colnames(all) = c('Site', 'VolM', 'Source', 'EstVol')
gartnervol = cbind(g14, est_vol[2])
colnames(gartnervol) = c('Site', 'VolM', 'Source', 'EstVol')
risd = gartnervol[,-c(3)]
risd$diff = NA
rows = c(1:31)
for (i in rows){
risd[i,4] = (risd[i,2]-risd[i,3])
}
g14_out = boxplot.stats(risd$diff, coef = 1)$out
g14_outind = which(risd$diff %in% c(g14_out))
risddev = sd(na.omit(risd$diff))
wallsd = wall_vol[,-c(3)]
wallsd$diff= NA
rows = c(1:31)
for (i in rows){
wallsd[i,4] = (wallsd[i,2]-wallsd[i,3])
}
View(wall_vol)
View(wall_vol)
gsdvol= readxl::read_excel('C:\\Users\\clang\\Documents\\USU\\DF_Areas\\debris_flow_stats\\data\\data_sheets\\processed_summary_data\\Catchment_Stats.xlsx', sheet = 'Vol_Summaries', na = ' ')
library(ggplot2)
est_vol = gsdvol[c(1,2)]
wall_vol = gsdvol[,c(1,3)]
g14 = gsdvol[,c(1,8)]
est = 'imagery'
wall = 'Wall (2022)'
gart = 'Gartner (2014) 1yr'
wall_vol = cbind(wall_vol, wall)
colnames(wall_vol) = c('Site','VolM', 'Source')
g14 = cbind(g14, gart)
colnames(g14) = c('Site','VolM', 'Source')
est_vol = cbind(est_vol, est)
colnames(est_vol)= c('Site', 'VolM', 'Source')
all = rbind(g14, wall_vol)
all = cbind(all, est_vol[2])
colnames(all) = c('Site', 'VolM', 'Source', 'EstVol')
gartnervol = cbind(g14, est_vol[2])
colnames(gartnervol) = c('Site', 'VolM', 'Source', 'EstVol')
risd = gartnervol[,-c(3)]
risd$diff = NA
rows = c(1:31)
for (i in rows){
risd[i,4] = (risd[i,2]-risd[i,3])
}
g14_out = boxplot.stats(risd$diff, coef = 1)$out
g14_outind = which(risd$diff %in% c(g14_out))
risddev = sd(na.omit(risd$diff))
wallsd = wall_vol[,-c(3)]
wallsd$diff= NA
rows = c(1:31)
for (i in rows){
wallsd[i,4] = (wallsd[i,2]-wallsd[i,3])
}
wall_out = boxplot.stats(wallsd$diff)$out
wall_outind = which(wallsd$diff %in% c(wall_out))
walldev = sd(na.omit(wallsd$diff))
allsd = all[,-c(3)]
allsd$diff = NA
rows = c(1:62)
for (i in rows){
allsd[i,4]= (allsd[i,2]- allsd[i,3])
}
out = boxplot.stats(allsd$diff)$out
out_ind = which(allsd$diff %in% c(out))
all_nout = allsd[-c(out_ind),]
alldev = sd(na.omit(all_nout$diff))
gartnervol_plot = ggplot(data = na.omit(gartnervol), aes(EstVol, VolM, color = Source)) + geom_point() +geom_abline(mapping = NULL, data = NULL, 1, 0) + xlim(0,15000) + ylim(0,15000) +ylab('Modeled Initial Volume (m3)') + xlab('Estimated Initial Volume from Imagery (m3)') + ggtitle('Gartner (2014) Modeled Volume') + geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = gartdev, linetype = 'dashed')+ geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = -gartdev, linetype = 'dashed') + expand_limits(x=0,y=0) +theme_bw()
gartnervol_plot = ggplot(data = na.omit(gartnervol), aes(EstVol, VolM, color = Source)) + geom_point() +geom_abline(mapping = NULL, data = NULL, 1, 0) + xlim(0,15000) + ylim(0,15000) +ylab('Modeled Initial Volume (m3)') + xlab('Estimated Initial Volume from Imagery (m3)') + ggtitle('Gartner (2014) Modeled Volume') + geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = risddev, linetype = 'dashed')+ geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = -risddev, linetype = 'dashed') + expand_limits(x=0,y=0) +theme_bw()
gartnervol_plot
ggsave('C:\\Users\\clang\\Documents\\USU\\DF_Areas\\data\\data_sheets\\figures\\plots\\gartner_vol.png', plot = gartnervol_plot, device = 'png')
View(gartnervol)
gartnervol_plot = ggplot(data = na.omit(gartnervol), aes(EstVol, VolM, color = Source)) + geom_point(data = na.omit(gartnervol)) +geom_abline(mapping = NULL, data = NULL, 1, 0) + xlim(0,15000) + ylim(0,15000) +ylab('Modeled Initial Volume (m3)') + xlab('Estimated Initial Volume from Imagery (m3)') + ggtitle('Gartner (2014) Modeled Volume') + geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = risddev, linetype = 'dashed')+ geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = -risddev, linetype = 'dashed') + expand_limits(x=0,y=0) +theme_bw()
gartnervol_plot
ggsave('C:\\Users\\clang\\Documents\\USU\\DF_Areas\\data\\data_sheets\\figures\\plots\\gartner_vol.png', plot = gartnervol_plot, device = 'png')
View(gsdvol)
est_vol = gsdvol[c(1,2)]
wall_vol = gsdvol[,c(1,3)]
g14 = gsdvol[,c(1,4)]
est = 'imagery'
wall = 'Wall (2022)'
gart = 'Gartner (2014) 1yr'
wall_vol = cbind(wall_vol, wall)
colnames(wall_vol) = c('Site','VolM', 'Source')
g14 = cbind(g14, gart)
colnames(g14) = c('Site','VolM', 'Source')
est_vol = cbind(est_vol, est)
colnames(est_vol)= c('Site', 'VolM', 'Source')
all = rbind(g14, wall_vol)
all = cbind(all, est_vol[2])
colnames(all) = c('Site', 'VolM', 'Source', 'EstVol')
gartnervol = cbind(g14, est_vol[2])
colnames(gartnervol) = c('Site', 'VolM', 'Source', 'EstVol')
risd = gartnervol[,-c(3)]
risd$diff = NA
rows = c(1:31)
for (i in rows){
risd[i,4] = (risd[i,2]-risd[i,3])
}
g14_out = boxplot.stats(risd$diff, coef = 1)$out
g14_outind = which(risd$diff %in% c(g14_out))
risddev = sd(na.omit(risd$diff))
wallsd = wall_vol[,-c(3)]
wallsd$diff= NA
rows = c(1:31)
for (i in rows){
wallsd[i,4] = (wallsd[i,2]-wallsd[i,3])
}
wall_out = boxplot.stats(wallsd$diff)$out
wall_outind = which(wallsd$diff %in% c(wall_out))
walldev = sd(na.omit(wallsd$diff))
allsd = all[,-c(3)]
allsd$diff = NA
rows = c(1:62)
for (i in rows){
allsd[i,4]= (allsd[i,2]- allsd[i,3])
}
out = boxplot.stats(allsd$diff)$out
out_ind = which(allsd$diff %in% c(out))
all_nout = allsd[-c(out_ind),]
alldev = sd(na.omit(all_nout$diff))
gartnervol_plot = ggplot(data = na.omit(gartnervol), aes(EstVol, VolM, color = Source)) + geom_point(data = na.omit(gartnervol)) +geom_abline(mapping = NULL, data = NULL, 1, 0) + xlim(0,15000) + ylim(0,15000) +ylab('Modeled Initial Volume (m3)') + xlab('Estimated Initial Volume from Imagery (m3)') + ggtitle('Gartner (2014) Modeled Volume') + geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = risddev, linetype = 'dashed')+ geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = -risddev, linetype = 'dashed') + expand_limits(x=0,y=0) +theme_bw()
gartnervol_plot
ggsave('C:\\Users\\clang\\Documents\\USU\\DF_Areas\\data\\data_sheets\\figures\\plots\\gartner_vol.png', plot = gartnervol_plot, device = 'png')
wallvolplot = ggplot(data = na.omit(wall_vol)) + geom_point(data = wall_vol, aes(EstVol, VolM, color = Source)) + scale_color_manual(values = c('Wall'= 'cornflowerblue')) +geom_abline(mapping = NULL, data = NULL, 1, 0) +xlim(0,15000) + ylim(0,15000) +ylab('Modeled Initial Volume (m3)') + xlab('Estimated Initial Volume from Imagery (m3)') + ggtitle('Wall (2022) Volume Model')+ theme_bw() + theme(legend.position = 'none')+ geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = walldev, linetype = 'dashed')+ geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = -walldev, linetype = 'dashed')+ expand_limits(x=0,y=0)
wallvolplot
View(wall_vol)
est_vol = gsdvol[c(1,2)]
wall_vol = gsdvol[,c(1,3)]
g14 = gsdvol[,c(1,4)]
est = 'imagery'
wall = 'Wall (2022)'
gart = 'Gartner (2014) 1yr'
wall_vol = cbind(wall_vol, wall, est_vol)
colnames(wall_vol) = c('Site','VolM', 'Source', 'EstVol')
g14 = cbind(g14, gart)
colnames(g14) = c('Site','VolM', 'Source')
est_vol = cbind(est_vol, est)
colnames(est_vol)= c('Site', 'VolM', 'Source')
all = rbind(g14, wall_vol)
est_vol = gsdvol[c(1,2)]
wall_vol = gsdvol[,c(1,3)]
g14 = gsdvol[,c(1,4)]
est = 'imagery'
wall = 'Wall (2022)'
gart = 'Gartner (2014) 1yr'
wall_vol = cbind(wall_vol, wall, est_vol[2])
colnames(wall_vol) = c('Site','VolM', 'Source', 'EstVol')
g14 = cbind(g14, gart)
colnames(g14) = c('Site','VolM', 'Source')
est_vol = cbind(est_vol, est)
colnames(est_vol)= c('Site', 'VolM', 'Source')
all = rbind(g14, wall_vol)
est_vol = gsdvol[c(1,2)]
wall_vol = gsdvol[,c(1,3)]
g14 = gsdvol[,c(1,4)]
est = 'imagery'
wall = 'Wall (2022)'
gart = 'Gartner (2014) 1yr'
wall_vol = cbind(wall_vol, wall)
colnames(wall_vol) = c('Site','VolM', 'Source', 'EstVol')
est_vol = gsdvol[c(1,2)]
wall_vol = gsdvol[,c(1,3)]
g14 = gsdvol[,c(1,4)]
est = 'imagery'
wall = 'Wall (2022)'
gart = 'Gartner (2014) 1yr'
wall_vol = cbind(wall_vol, wall)
colnames(wall_vol) = c('Site','VolM', 'Source')
g14 = cbind(g14, gart)
colnames(g14) = c('Site','VolM', 'Source')
est_vol = cbind(est_vol, est)
colnames(est_vol)= c('Site', 'VolM', 'Source')
all = rbind(g14, wall_vol)
all = cbind(all, est_vol[2])
colnames(all) = c('Site', 'VolM', 'Source', 'EstVol')
gartnervol = cbind(g14, est_vol[2])
wall_vol = cbind(wall_vol, est_vol[2])
colnames(wall_vol) = c('Site', 'VolM', 'Source', 'EstVol')
colnames(gartnervol) = c('Site', 'VolM', 'Source', 'EstVol')
risd = gartnervol[,-c(3)]
risd$diff = NA
rows = c(1:31)
for (i in rows){
risd[i,4] = (risd[i,2]-risd[i,3])
}
g14_out = boxplot.stats(risd$diff, coef = 1)$out
g14_outind = which(risd$diff %in% c(g14_out))
risddev = sd(na.omit(risd$diff))
wallsd = wall_vol[,-c(3)]
wallsd$diff= NA
rows = c(1:31)
for (i in rows){
wallsd[i,4] = (wallsd[i,2]-wallsd[i,3])
}
wall_out = boxplot.stats(wallsd$diff)$out
wall_outind = which(wallsd$diff %in% c(wall_out))
walldev = sd(na.omit(wallsd$diff))
allsd = all[,-c(3)]
allsd$diff = NA
rows = c(1:62)
for (i in rows){
allsd[i,4]= (allsd[i,2]- allsd[i,3])
}
out = boxplot.stats(allsd$diff)$out
out_ind = which(allsd$diff %in% c(out))
all_nout = allsd[-c(out_ind),]
alldev = sd(na.omit(all_nout$diff))
gartnervol_plot = ggplot(data = na.omit(gartnervol), aes(EstVol, VolM, color = Source)) + geom_point(data = na.omit(gartnervol)) +geom_abline(mapping = NULL, data = NULL, 1, 0) + xlim(0,15000) + ylim(0,15000) +ylab('Modeled Initial Volume (m3)') + xlab('Estimated Initial Volume from Imagery (m3)') + ggtitle('Gartner (2014) Modeled Volume') + geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = risddev, linetype = 'dashed')+ geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = -risddev, linetype = 'dashed') + expand_limits(x=0,y=0) +theme_bw()
gartnervol_plot
ggsave('C:\\Users\\clang\\Documents\\USU\\DF_Areas\\data\\data_sheets\\figures\\plots\\gartner_vol.png', plot = gartnervol_plot, device = 'png')
wallvolplot = ggplot(data = na.omit(wall_vol)) + geom_point(data = wall_vol, aes(EstVol, VolM, color = Source)) + scale_color_manual(values = c('Wall'= 'cornflowerblue')) +geom_abline(mapping = NULL, data = NULL, 1, 0) +xlim(0,15000) + ylim(0,15000) +ylab('Modeled Initial Volume (m3)') + xlab('Estimated Initial Volume from Imagery (m3)') + ggtitle('Wall (2022) Volume Model')+ theme_bw() + theme(legend.position = 'none')+ geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = walldev, linetype = 'dashed')+ geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = -walldev, linetype = 'dashed')+ expand_limits(x=0,y=0)
wallvolplot
ggsave('C:\\Users\\clang\\Documents\\USU\\DF_Areas\\data\\data_sheets\\figures\\plots\\wall_vol.png', plot = wallvolplot, device = 'png')
View(gsdvol)
gartnervol_plot = ggplot(data = na.omit(gartnervol), aes(EstVol, VolM, color = Source)) + geom_point(data = na.omit(gartnervol)) +geom_abline(mapping = NULL, data = NULL, 1, 0) + xlim(0,25000) + ylim(0,25000) +ylab('Modeled Initial Volume (m3)') + xlab('Estimated Initial Volume from Imagery (m3)') + ggtitle('Gartner (2014) Modeled Volume') + geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = risddev, linetype = 'dashed')+ geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = -risddev, linetype = 'dashed') + expand_limits(x=0,y=0) +theme_bw()
gartnervol_plot
ggsave('C:\\Users\\clang\\Documents\\USU\\DF_Areas\\data\\data_sheets\\figures\\plots\\gartner_vol.png', plot = gartnervol_plot, device = 'png')
wallvolplot = ggplot(data = na.omit(wall_vol)) + geom_point(data = wall_vol, aes(EstVol, VolM, color = Source)) + scale_color_manual(values = c('Wall'= 'cornflowerblue')) +geom_abline(mapping = NULL, data = NULL, 1, 0) +xlim(0,25000) + ylim(0,25000) +ylab('Modeled Initial Volume (m3)') + xlab('Estimated Initial Volume from Imagery (m3)') + ggtitle('Wall (2022) Volume Model')+ theme_bw() + theme(legend.position = 'none')+ geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = walldev, linetype = 'dashed')+ geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = -walldev, linetype = 'dashed')+ expand_limits(x=0,y=0)
wallvolplot
ggsave('C:\\Users\\clang\\Documents\\USU\\DF_Areas\\data\\data_sheets\\figures\\plots\\wall_vol.png', plot = wallvolplot, device = 'png')
View(wall_vol)
wallvolplot = ggplot(data = na.omit(wall_vol)) + geom_point(data = wall_vol, aes(EstVol, VolM, color = Source)) + scale_color_manual(values = c('Wall'= 'cornflowerblue')) +geom_abline(mapping = NULL, data = NULL, 1, 0) +xlim(0,25000) + ylim(0,150000) +ylab('Modeled Initial Volume (m3)') + xlab('Estimated Initial Volume from Imagery (m3)') + ggtitle('Wall (2022) Volume Model')+ theme_bw() + theme(legend.position = 'none')+ geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = walldev, linetype = 'dashed')+ geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = -walldev, linetype = 'dashed')+ expand_limits(x=0,y=0)
wallvolplot
ggsave('C:\\Users\\clang\\Documents\\USU\\DF_Areas\\data\\data_sheets\\figures\\plots\\wall_vol.png', plot = wallvolplot, device = 'png')
wallvolplot = ggplot(data = na.omit(wall_vol)) + geom_point(data = wall_vol, aes(EstVol, VolM, color = Source)) + scale_color_manual(values = c('Wall'= 'cornflowerblue')) +geom_abline(mapping = NULL, data = NULL, 1, 0) +xlim(0,25000) + ylim(0,25000) +ylab('Modeled Initial Volume (m3)') + xlab('Estimated Initial Volume from Imagery (m3)') + ggtitle('Wall (2022) Volume Model')+ theme_bw() + theme(legend.position = 'none')+ geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = walldev, linetype = 'dashed')+ geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = -walldev, linetype = 'dashed')+ expand_limits(x=0,y=0)
wallvolplot
ggsave('C:\\Users\\clang\\Documents\\USU\\DF_Areas\\data\\data_sheets\\figures\\plots\\wall_vol.png', plot = wallvolplot, device = 'png')
allplot = ggplot(data = na.omit(all), aes(EstVol, VolM, shape= Source)) + geom_point() +scale_color_manual(values = c('black','black')) + scale_shape_manual(values = c(1, 16)) + geom_abline(mapping = NULL, data = NULL, 1, 0) + ylim(0,32000) +ylab('Modeled Initial Volume (m3)') + xlab('Estimated Initial Volume from Imagery (m3)')  + theme_bw()+ labs(color ='Volume Model')+ expand_limits(x=0,y=0) + theme(legend.position = 'none')+ geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = -alldev, linetype = 'dashed') + geom_abline(mapping = NULL, data = NULL, slope = 1, intercept = alldev, linetype = 'dashed')
allplot
ggsave('C:\\Users\\clang\\Documents\\USU\\DF_Areas\\debris_flow_stats\\data\\figures\\plots\\allvol.png', plot = allplot, device = 'png')
lnvolwall = gsdvol[,c(1,21)]
gsdvol= readxl::read_excel('C:\\Users\\clang\\Documents\\USU\\DF_Areas\\debris_flow_stats\\data\\data_sheets\\processed_summary_data\\Catchment_Stats.xlsx', sheet = 'Vol_Summaries', na = ' ')
library(ggplot2)
lnvolwall = gsdvol[,c(1,5)]
lnvolwall$Source = 'Wall'
lnvolg14 = gsdvol[,c(1,6)]
lnvolg14$Source = 'Gartner 14'
lnvolimg = gsdvol[,c(1,7)]
lnvolimg$Source = 'Imagery'
lnvolwall = cbind(lnvolwall, lnvolimg[2])
lnvolg14 = cbind(lnvolg14, lnvolimg[2])
colnames(lnvolwall) = c('Site', 'ln_vol', 'Source', 'LnEstInt')
colnames(lnvolg14) = c('Site', 'ln_vol', 'Source', 'LnEstInt')
colnames(lnvolimg) = c('Site', 'ln_vol', 'Source', 'LnEstInt')
lnvol = rbind(lnvolwall,lnvolg14)
lnvolplot = ggplot(data = lnvol, aes(LnEstInt,ln_vol, color = Source)) + geom_point() +  geom_abline(mapping = NULL, data = NULL, 1, 0) +ylab('ln(Modeled Volume) (m3)') + xlab('ln(Estimated Initial Volume from Imagery) (m3)') + ggtitle('ln(Vol)') + theme_bw() +ylim(0,11) + xlim(0,11)
ggsave('C:\\Users\\clang\\Documents\\USU\\DF_Areas\\data\\data_sheets\\figures\\plots\\allvol.png', plot = lnvolplot, device = 'png')
lnvolplot
