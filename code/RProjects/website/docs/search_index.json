[["index.html", "A Minimal Book Example Chapter 1 About 1.1 Usage 1.2 Render book 1.3 Preview book", " A Minimal Book Example John Doe 2023-03-19 Chapter 1 About This is a sample book written in Markdown. You can use anything that Pandoc’s Markdown supports; for example, a math equation \\(a^2 + b^2 = c^2\\). 1.1 Usage Each bookdown chapter is an .Rmd file, and each .Rmd file can contain one (and only one) chapter. A chapter must start with a first-level heading: # A good chapter, and can contain one (and only one) first-level heading. Use second-level and higher headings within chapters like: ## A short section or ### An even shorter section. The index.Rmd file is required, and is also your first book chapter. It will be the homepage when you render the book. 1.2 Render book You can render the HTML version of this example book without changing anything: Find the Build pane in the RStudio IDE, and Click on Build Book, then select your output format, or select “All formats” if you’d like to use multiple formats from the same book source files. Or build the book from the R console: bookdown::render_book() To render this example to PDF as a bookdown::pdf_book, you’ll need to install XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. 1.3 Preview book As you work, you may start a local server to live preview this HTML book. This preview will update as you edit the book when you save individual .Rmd files. You can start the server in a work session by using the RStudio add-in “Preview book”, or from the R console: bookdown::serve_book() "],["database-structure.html", "Chapter 2 Database Structure:", " Chapter 2 Database Structure: knitr::include_graphics(&quot;C:/Users/clang/Documents/USU/DF_Areas/debris_flow_stats/code/RProjects/website/docs/_main_files/figure-html/database_structure.png&quot;) Figure 2.1: database structure "],["code-for-designing-and-building-my-database-structure-in-r.html", "Chapter 3 Code for designing and building my database structure in R", " Chapter 3 Code for designing and building my database structure in R #### Building a database setwd(&#39;C:\\\\Users\\\\clang\\\\Documents\\\\USU\\\\DF_Areas\\\\debris_flow_stats\\\\data\\\\data_sheets&#39;) #### Connecting and building the db library(DBI) df_db = dbConnect(RSQLite::SQLite(), &#39;df_db&#39;) ### Creating tables in db #DF ID table dbExecute(df_db, &quot;create table df_ID ( Site varchar(50) NOT NULL primary key, Fire varchar(50) NOT NULL, Lat double, Long double);&quot;) #DF geospatial volume estimates dbExecute(df_db, &quot;create table df_volume( DF_ID varchar(5) primary key, Site varchar(50) NOT NULL, EstInt double, t_0 double, t_1 double, t_2 double, t_3 double, t_4 double, t_5 double, t_6 double, t_7 double, t_8 double, t_9 double, t_10 double, foreign key (Site) references df_ID(Site));&quot;) #df grain size distributions (modelled and observed) dbExecute(df_db, &quot;create table df_gsd( DF_ID varchar(5) primary key, Site varchar(50) NOT NULL, initialsub_D16phi double, initialsub_D50phi double, initialsub_D84phi double, initialsub_D16mm double, initialsub_D50mm double, initialsub_D84mm double, obssur_D16mm double, obssur_D50mm double, obssur_D84mm double, obssub_D16mm double, obssub_D50mm double, obssub_D84mm double, foreign key (Site) references df_ID(Site)); &quot;) #geospatial debris flow morphology dbExecute(df_db, &quot;create table df_morphology( DF_ID varchar(5) primary key, site_name varchar(50) NOT NULL, runout_L double, RF_angle double, int_vol double, foreign key (site_name) references df_ID(site_name));&quot;) #geospatial reach morphology dbExecute(df_db, &quot;create table reach_morphology( reach_ID integer check(reach_ID in (1,2,3)), DF_name varchar(50) primary key, DF_ID varchar(5), site_ID varchar(10) generated always as (DF_ID + &#39;_&#39; + reach_ID) stored, stream_class char(1) check(stream_class in (&#39;P&#39;, &#39;I&#39;)), reach_lengthm integer, valley_widthm double, foreign key (DF_ID) references df_morphology(DF_ID));&quot;) #geospatial/modeled channel morphology dbExecute(df_db, &quot;create table channel_morphology( DF_ID varchar(5) primary key, channel_ID varchar(10), IMP_BFWm double, IMP_BFDm double, flow_depthm double, D50phi_Snyder double, D50mm_Snyder double, river_lengthm double, sinuosity double, usdakm2 double, gradient double, slope_deg double, q2m3 double, q5m3 double, q10m3 double, q50m3 double, q100m3 double, q500m3 double, foreign key (channel_ID) references reach_morphology(site_ID));&quot;) #geospatial subcatchment morphology dbExecute(df_db, &quot;create table subcatchment_morphology( catch_id integer primary key autoincrement, DF_ID varchar(5), drainage_areakm2 double, relief double, Cp2008 double, Cp2011 double, Cp2016 double, Sp23 double, Mean_Elevation double, MgO double, Rd double, WI double, CS double, Om double, Ro double, AnnP double, T double, K double, HC double, S23_Areakm2 double, Bmh_Areakm2 double, Channel_Devlp char(1) check(Channel_Devlp in (&#39;Y&#39;,&#39;N&#39;)), foreign key (DF_ID) references reach_morphology(DF_ID));&quot;) ### Import csv to dbtables #first, read csvs sites = read.csv(&#39;Site_Locations.csv&#39;, header = T) df_volumes = read.csv(&#39;processed_summary_data//Gross_Summary_Vol_tdf.csv&#39;, header = T, na.strings = &#39; &#39;) df_gsd = read.csv(&#39;processed_summary_data//df_gsd.csv&#39;, header = T, na.strings = &#39; &#39;) df_morphology = read.csv(&#39;processed_summary_data//df_morphology.csv&#39;, header = T, na.strings = &#39; &#39;) reach_morphology = read.csv(&#39;processed_summary_data//reach_morphology.csv&#39;, header = T, na.strings = &#39; &#39;) channel_morphology = read.csv(&#39;processed_summary_data//channel_morphology.csv&#39;, header = T, na.strings = &#39; &#39;) subcatch_morphology = read.csv(&#39;processed_summary_data//subcatchment_morphology.csv&#39;, header = T, na.strings = &#39; &#39;) # import csv into tables (for completed tables) dbWriteTable(df_db, &#39;df_ID&#39;, sites, append = TRUE) dbWriteTable(df_db, &#39;df_volume&#39;, df_volumes, append = TRUE) dbWriteTable(df_db, &#39;df_gsd&#39;, df_gsd, append = TRUE) "],["cross.html", "Chapter 4 Cross-references 4.1 Chapters and sub-chapters 4.2 Captioned figures and tables", " Chapter 4 Cross-references Cross-references make it easier for your readers to find and link to elements in your book. 4.1 Chapters and sub-chapters There are two steps to cross-reference any heading: Label the heading: # Hello world {#nice-label}. Leave the label off if you like the automated heading generated based on your heading title: for example, # Hello world = # Hello world {#hello-world}. To label an un-numbered heading, use: # Hello world {-#nice-label} or {# Hello world .unnumbered}. Next, reference the labeled heading anywhere in the text using \\@ref(nice-label); for example, please see Chapter 4. If you prefer text as the link instead of a numbered reference use: any text you want can go here. 4.2 Captioned figures and tables Figures and tables with captions can also be cross-referenced from elsewhere in your book using \\@ref(fig:chunk-label) and \\@ref(tab:chunk-label), respectively. See Figure 4.1. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 4.1: Here is a nice figure! Don’t miss Table 4.1. knitr::kable( head(pressure, 10), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 4.1: Here is a nice table! temperature pressure 0 0.0002 20 0.0012 40 0.0060 60 0.0300 80 0.0900 100 0.2700 120 0.7500 140 1.8500 160 4.2000 180 8.8000 "],["parts.html", "Chapter 5 Parts", " Chapter 5 Parts You can add parts to organize one or more book chapters together. Parts can be inserted at the top of an .Rmd file, before the first-level chapter heading in that same file. Add a numbered part: # (PART) Act one {-} (followed by # A chapter) Add an unnumbered part: # (PART\\*) Act one {-} (followed by # A chapter) Add an appendix as a special kind of un-numbered part: # (APPENDIX) Other stuff {-} (followed by # A chapter). Chapters in an appendix are prepended with letters instead of numbers. "],["footnotes-and-citations.html", "Chapter 6 Footnotes and citations 6.1 Footnotes 6.2 Citations", " Chapter 6 Footnotes and citations 6.1 Footnotes Footnotes are put inside the square brackets after a caret ^[]. Like this one 1. 6.2 Citations Reference items in your bibliography file(s) using @key. For example, we are using the bookdown package (Xie 2023) (check out the last code chunk in index.Rmd to see how this citation key was added) in this sample book, which was built on top of R Markdown and knitr (Xie 2015) (this citation was added manually in an external file book.bib). Note that the .bib files need to be listed in the index.Rmd with the YAML bibliography key. The RStudio Visual Markdown Editor can also make it easier to insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations References "],["blocks.html", "Chapter 7 Blocks 7.1 Equations 7.2 Theorems and proofs 7.3 Callout blocks", " Chapter 7 Blocks 7.1 Equations Here is an equation. \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{7.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), like see Equation (7.1). 7.2 Theorems and proofs Labeled theorems can be referenced in text using \\@ref(thm:tri), for example, check out this smart theorem 7.1. Theorem 7.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Read more here https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html. 7.3 Callout blocks The R Markdown Cookbook provides more help on how to use custom blocks to design your own callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html "],["sharing-your-book.html", "Chapter 8 Sharing your book 8.1 Publishing 8.2 404 pages 8.3 Metadata for sharing", " Chapter 8 Sharing your book 8.1 Publishing HTML books can be published online, see: https://bookdown.org/yihui/bookdown/publishing.html 8.2 404 pages By default, users will be directed to a 404 page if they try to access a webpage that cannot be found. If you’d like to customize your 404 page instead of using the default, you may add either a _404.Rmd or _404.md file to your project root and use code and/or Markdown syntax. 8.3 Metadata for sharing Bookdown HTML books will provide HTML metadata for social sharing on platforms like Twitter, Facebook, and LinkedIn, using information you provide in the index.Rmd YAML. To setup, set the url for your book and the path to your cover-image file. Your book’s title and description are also used. This gitbook uses the same social sharing data across all chapters in your book- all links shared will look the same. Specify your book’s source repository on GitHub using the edit key under the configuration options in the _output.yml file, which allows users to suggest an edit by linking to a chapter’s source file. Read more about the features of this output format here: https://pkgs.rstudio.com/bookdown/reference/gitbook.html Or use: ?bookdown::gitbook "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
