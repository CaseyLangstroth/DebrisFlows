getwd
getwd()
getwd()
setwd("~/USU/DF_Areas/debris_flow_stats/code/RProjects/website/RDS_website")
knitr::include_graphics("C:/Users/clang/Documents/USU/DF_Areas/debris_flow_stats/code/RProjects/website/docs/_main_files/figure-html/database_structure.png") #this probably won't work because my book isnt updating for some reason....
library(DBI)
dragons_db = dbConnect(drv = RSQLite::SQLite(),(".../Spring_2023/WILD6900/sql_exercises/dragons.db")
dragons_db = dbConnect(drv = RSQLite::SQLite(),("USU/Classes/Spring_2023/WILD6900/sql_exercises/dragons.db")
dragons_db = dbConnect(drv = RSQLite::SQLite(),("USU/Classes/Spring_2023/WILD6900/sql_exercises/dragons.db")
dragons_db = dbConnect(drv = RSQLite::SQLite(),('C:\\Users\\clang\\Documents\\USU\\Classes\\Spring_2023\\WILD6900\\sql_exercises\\dragons.db)
dragons_db = dbConnect(drv = RSQLite::SQLite(),('C:\\Users\\clang\\Documents\\USU\\Classes\\Spring_2023\\WILD6900\\sql_exercises\\dragons.db')
dragons_db <- dbConnect(drv = RSQLite::SQLite(),('C:\\Users\\clang\\Documents\\USU\\Classes\\Spring_2023\\WILD6900\\sql_exercises\\dragons.db')
dragons_db = dbConnect(drv = RSQLite::SQLite(),('C:\\Users\\clang\\Documents\\USU\\Classes\\Spring_2023\\WILD6900\\sql_exercises\\dragons.db')
dragons_db = dbConnect(drv = RSQLite::SQLite(),'C:\\Users\\clang\\Documents\\USU\\Classes\\Spring_2023\\WILD6900\\sql_exercises\\dragons.db')
dragons_db = dbConnect(drv = RSQLite::SQLite(),'C:\\Users\\clang\\Documents\\USU\\Classes\\Spring_2023\\WILD6900\\sql_exercises\\dragons.db')
diet = dbQuery(conn = dragons_db,
'SELECT * FROM dragons;')
diet = dbGetQuery(conn = dragons_db,
'SELECT * FROM dragons;')
morphometrics = dbGetQuery(conn = dragons.db,
'select * from morphometrics
')
morphometrics = dbGetQuery(conn = dragons_db,
'select * from morphometrics')
diet = dbGetQuery(conn = dragons_db,
'SELECT * FROM diet;')
morphometrics = dbGetQuery(conn = dragons_db,
'select * from morphometrics;')
gps = dbGetQuery(conn = dragons_db,
'select * from gps_data;')
dragons = dbGetQuery(conn = dragons_db,
'select * from dragons;')
inds = dragons$dragon_id
length(inds)
inds[1] %in% morphometrics$dragon_id
inds[1] %in% diet$dragon_id
inds[1] %in% unique(gps$dragon_id)
sustem.time({inds[1] %in% unique(dps$dragon_id)})
system.time({inds[1] %in% unique(dps$dragon_id)})
system.time({inds[1] %in% unique(gps$dragon_id)})
system.time({inds[1] %in% gps$dragon_id})
res = data.frame(dragons_id = NA,
has_morphometrics = NA,
has_gps = NA,
has_diet = NA)
for (i in 1:length(inds)){
res[i, ] $dragon_id = inds[i]
res[i,]$has_morphometrics = inds[i]%in% morphometrics$dragon_id
res[i,]$diet = inds[i]%in% diet$dragon_id
res[i,]$has_gps = inds[i]%in% unique(gps$dragon_id)
}
res[res$has_gps & res$has_diet,]
View(res)
res[res$has_gps & res$has_diet,]
for (i in 1:length(inds)){
res[i, ] $dragon_id = inds[i]
res[i,]$has_morphometrics = inds[i]%in% morphometrics$dragon_id
res[i,]$diet = inds[i]%in% diet$dragon_id
res[i,]$has_gps = inds[i]%in% gps$dragon_id
}
res[res$has_gps & res$has_diet,]
res[i,]$has_diet = inds[i]%in% diet$dragon_id
res[res$has_gps & res$has_diet,]
res[i, ]$dragon_id = inds[i]
inds[i]
res[i,]$has_gps <- inds[i]%in% gps$dragon_id
res[res$has_gps & res$has_diet,]
inds = dragons$dragon_id
length(inds)
inds[1] %in% morphometrics$dragon_id
inds[1] %in% diet$dragon_id
inds[1] %in% unique(gps$dragon_id)
system.time({inds[1] %in% unique(gps$dragon_id)})
system.time({inds[1] %in% gps$dragon_id})
res = data.frame(dragons_id = NA,
has_morphometrics = NA,
has_gps = NA,
has_diet = NA)
for (i in 1:length(inds)){
res[i, ]$dragon_id <- inds[i]
res[i,]$has_morphometrics <- inds[i]%in% morphometrics$dragon_id
res[i,]$has_diet <- inds[i]%in% diet$dragon_id
res[i,]$has_gps <- inds[i]%in% gps$dragon_id
}
res[res$has_gps & res$has_diet,]
nrow(res[res$has_gps & res$has_diet,])
