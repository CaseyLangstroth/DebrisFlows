getwd
getwd()
getwd()
setwd("~/USU/DF_Areas/debris_flow_stats/code/RProjects/website/RDS_website")
knitr::include_graphics("C:/Users/clang/Documents/USU/DF_Areas/debris_flow_stats/code/RProjects/website/docs/_main_files/figure-html/database_structure.png") #this probably won't work because my book isnt updating for some reason....
library(DBI)
dragons_db = dbConnect(drv = RSQLite::SQLite(),(".../Spring_2023/WILD6900/sql_exercises/dragons.db")
dragons_db = dbConnect(drv = RSQLite::SQLite(),("USU/Classes/Spring_2023/WILD6900/sql_exercises/dragons.db")
dragons_db = dbConnect(drv = RSQLite::SQLite(),("USU/Classes/Spring_2023/WILD6900/sql_exercises/dragons.db")
dragons_db = dbConnect(drv = RSQLite::SQLite(),('C:\\Users\\clang\\Documents\\USU\\Classes\\Spring_2023\\WILD6900\\sql_exercises\\dragons.db)
dragons_db = dbConnect(drv = RSQLite::SQLite(),('C:\\Users\\clang\\Documents\\USU\\Classes\\Spring_2023\\WILD6900\\sql_exercises\\dragons.db')
dragons_db <- dbConnect(drv = RSQLite::SQLite(),('C:\\Users\\clang\\Documents\\USU\\Classes\\Spring_2023\\WILD6900\\sql_exercises\\dragons.db')
dragons_db = dbConnect(drv = RSQLite::SQLite(),('C:\\Users\\clang\\Documents\\USU\\Classes\\Spring_2023\\WILD6900\\sql_exercises\\dragons.db')
dragons_db = dbConnect(drv = RSQLite::SQLite(),'C:\\Users\\clang\\Documents\\USU\\Classes\\Spring_2023\\WILD6900\\sql_exercises\\dragons.db')
dragons_db = dbConnect(drv = RSQLite::SQLite(),'C:\\Users\\clang\\Documents\\USU\\Classes\\Spring_2023\\WILD6900\\sql_exercises\\dragons.db')
diet = dbQuery(conn = dragons_db,
'SELECT * FROM dragons;')
diet = dbGetQuery(conn = dragons_db,
'SELECT * FROM dragons;')
morphometrics = dbGetQuery(conn = dragons.db,
'select * from morphometrics
')
morphometrics = dbGetQuery(conn = dragons_db,
'select * from morphometrics')
diet = dbGetQuery(conn = dragons_db,
'SELECT * FROM diet;')
morphometrics = dbGetQuery(conn = dragons_db,
'select * from morphometrics;')
gps = dbGetQuery(conn = dragons_db,
'select * from gps_data;')
dragons = dbGetQuery(conn = dragons_db,
'select * from dragons;')
inds = dragons$dragon_id
length(inds)
inds[1] %in% morphometrics$dragon_id
inds[1] %in% diet$dragon_id
inds[1] %in% unique(gps$dragon_id)
sustem.time({inds[1] %in% unique(dps$dragon_id)})
system.time({inds[1] %in% unique(dps$dragon_id)})
system.time({inds[1] %in% unique(gps$dragon_id)})
system.time({inds[1] %in% gps$dragon_id})
res = data.frame(dragons_id = NA,
has_morphometrics = NA,
has_gps = NA,
has_diet = NA)
for (i in 1:length(inds)){
res[i, ] $dragon_id = inds[i]
res[i,]$has_morphometrics = inds[i]%in% morphometrics$dragon_id
res[i,]$diet = inds[i]%in% diet$dragon_id
res[i,]$has_gps = inds[i]%in% unique(gps$dragon_id)
}
res[res$has_gps & res$has_diet,]
View(res)
res[res$has_gps & res$has_diet,]
for (i in 1:length(inds)){
res[i, ] $dragon_id = inds[i]
res[i,]$has_morphometrics = inds[i]%in% morphometrics$dragon_id
res[i,]$diet = inds[i]%in% diet$dragon_id
res[i,]$has_gps = inds[i]%in% gps$dragon_id
}
res[res$has_gps & res$has_diet,]
res[i,]$has_diet = inds[i]%in% diet$dragon_id
res[res$has_gps & res$has_diet,]
res[i, ]$dragon_id = inds[i]
inds[i]
res[i,]$has_gps <- inds[i]%in% gps$dragon_id
res[res$has_gps & res$has_diet,]
inds = dragons$dragon_id
length(inds)
inds[1] %in% morphometrics$dragon_id
inds[1] %in% diet$dragon_id
inds[1] %in% unique(gps$dragon_id)
system.time({inds[1] %in% unique(gps$dragon_id)})
system.time({inds[1] %in% gps$dragon_id})
res = data.frame(dragons_id = NA,
has_morphometrics = NA,
has_gps = NA,
has_diet = NA)
for (i in 1:length(inds)){
res[i, ]$dragon_id <- inds[i]
res[i,]$has_morphometrics <- inds[i]%in% morphometrics$dragon_id
res[i,]$has_diet <- inds[i]%in% diet$dragon_id
res[i,]$has_gps <- inds[i]%in% gps$dragon_id
}
res[res$has_gps & res$has_diet,]
nrow(res[res$has_gps & res$has_diet,])
knitr::include_graphics("C:\\Users\\clang\\Documents\\USU\\DF_Areas\\debris_flow_stats\\code\\RProjects\\website\\RDS_website\\database_structure.pdf")
densityplot = ggplot(data = densityd, aes(duration, age_class, fill = age_class)) + geom_density_ridges(scale = 8)
# Plot 1 ####
# Make a barplot showing how many tags were deployed on dragons at each capture
# site. Each capture site should be filled with a different color. Theme used:
# light. Axis labels, legend title, and plot title should appear as shown.
library(DBI)
library(ggplot2)
library(tidyverse)
dragons_db <- dbConnect(RSQLite::SQLite(), "C:\\Users\\clang\\Documents\\USU\\Classes\\Spring_2023\\WILD6900\\sql_exercises\\dragons.db")
dragons <- dbGetQuery(dragons_db, "SELECT * FROM dragons;")
capture_sites <- dbGetQuery(dragons_db, "SELECT * FROM capture_sites;")
captures <- dbGetQuery(dragons_db, "SELECT * FROM captures;")
morphometrics <- dbGetQuery(dragons_db, "SELECT * FROM morphometrics;")
diet <- dbGetQuery(dragons_db, "SELECT * FROM diet;")
tags <- dbGetQuery(dragons_db, "SELECT * FROM tags;")
deployments <- dbGetQuery(dragons_db, "SELECT * FROM deployments;")
telemetry <- dbGetQuery(dragons_db, "SELECT * FROM gps_data;")
tagsplot = ggplot(data = captures, aes(site, fill = site)) + geom_bar() + theme_light() + xlab('') + ylab('Count')
tagsplot
# Plot 2 ####
# I ran a regression modeling wingspan of adult and subadult dragons as a
# function of tarsus length and age class. Run the following code to get a
# data frame of the mean model predictions plus confidence intervals:
reg_data <- morphometrics %>%
left_join(dragons) %>%
filter(age_class %in% c("Subadult", "Adult"))
reg <- lm(formula = wingspan_cm ~ tarsus_length_cm + age_class, data = reg_data)
pred <- predict(reg, se.fit = TRUE)
preds <- data.frame(mean = pred$fit,
upr = pred$fit + 1.96 * pred$se.fit,
lwr = pred$fit - 1.96 * pred$se.fit,
age = reg_data$age_class)
# Now make a plot of wingspan as a function of tarsus length broken down by age.
# Plot the regression line, the confidence intervals ribbon, and the raw points
# (hint: make sure you add the layers to the plot in the right order!)
# Data and regression line should be in different colors for the two age classes.
# The ribbon should be light gray (use gray90). The legend should appear at the
# bottom. Theme used: light. Axis labels, legend title, and plot title should
# appear as shown.
predsplot = ggplot(data = reg_data, aes(tarsus_length_cm, wingspan_cm, color = age_class)) + geom_point()
predsplot + geom_ribbon(data = reg_data, aes(ymax = preds$upr, ymin = preds$lwr , fill = 'gray90')) + geom_abline(slope = coefs[2], intercept = coefs[1])
densityplot = ggplot(data = densityd, aes(duration, age_class, fill = age_class)) + geom_density_ridges(scale = 8)
densityplot + labs(y = 'Age Class', x = 'Duration (days)') + theme_minimal() + theme(legend.position = 'none')
deployments$start_deployment = ymd(deployments$start_deployment)
deployments$end_deployment = ymd(deployments$end_deployment)
deployments$duration = difftime(deployments$end_deployment,deployments$start_deployment)
densityd = left_join(deployments, dragons, by = 'dragon_id')
densityd$age_class = as.factor(densityd$age_class)
densityd$age_class = fct_relevel(densityd$age_class, c('Adult','Subadult', 'Juvenile'))
library(ggridges)
densityplot = ggplot(data = densityd, aes(duration, age_class, fill = age_class)) + geom_density_ridges(scale = 8)
densityplot + labs(y = 'Age Class', x = 'Duration (days)') + theme_minimal() + theme(legend.position = 'none')
predsplot = ggplot(data = reg_data, aes(tarsus_length_cm, wingspan_cm, color = age_class)) + geom_point()
predsplot + geom_ribbon(data = reg_data, aes(ymax = preds$upr, ymin = preds$lwr , fill = 'gray90')) + geom_abline(slope = coefs[2], intercept = coefs[1])
